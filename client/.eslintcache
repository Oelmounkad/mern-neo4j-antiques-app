[{"C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\index.js":"1","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\App.js":"2","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\PersonList.js":"3","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\context\\person\\PersonState.js":"4","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\context\\person\\PersonReducer.js":"5","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\context\\person\\PersonContext.js":"6","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\context\\types.js":"7","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\Person.js":"8","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\NeoGraph.js":"9","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\AddPerson.js":"10","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\Group.js":"11","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\AddResource.js":"12","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\AddGroup.js":"13","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\AddProcess.js":"14","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\ConnectGroupProcess.js":"15","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\EditPerson.js":"16","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\ConnectEntities.js":"17","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\AddCategory.js":"18","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\AddObject.js":"19","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\layout\\Header.js":"20"},{"size":219,"mtime":1607014317158,"results":"21","hashOfConfig":"22"},{"size":1889,"mtime":1611159141518,"results":"23","hashOfConfig":"22"},{"size":1747,"mtime":1611159977928,"results":"24","hashOfConfig":"22"},{"size":12876,"mtime":1610744955892,"results":"25","hashOfConfig":"22"},{"size":5159,"mtime":1610739037869,"results":"26","hashOfConfig":"22"},{"size":108,"mtime":1607015145917,"results":"27","hashOfConfig":"22"},{"size":1409,"mtime":1610738756795,"results":"28","hashOfConfig":"22"},{"size":3417,"mtime":1611157531196,"results":"29","hashOfConfig":"22"},{"size":4254,"mtime":1609666720071,"results":"30","hashOfConfig":"22"},{"size":1887,"mtime":1609669111824,"results":"31","hashOfConfig":"22"},{"size":5347,"mtime":1611157527576,"results":"32","hashOfConfig":"22"},{"size":1401,"mtime":1610375063781,"results":"33","hashOfConfig":"22"},{"size":2705,"mtime":1609667137579,"results":"34","hashOfConfig":"22"},{"size":3339,"mtime":1609762163392,"results":"35","hashOfConfig":"22"},{"size":3969,"mtime":1609762155972,"results":"36","hashOfConfig":"22"},{"size":2479,"mtime":1609768444491,"results":"37","hashOfConfig":"22"},{"size":5052,"mtime":1610367972249,"results":"38","hashOfConfig":"22"},{"size":1894,"mtime":1610738393957,"results":"39","hashOfConfig":"22"},{"size":2523,"mtime":1610744944044,"results":"40","hashOfConfig":"22"},{"size":1620,"mtime":1611159616133,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"iejcsp",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\index.js",[],["92","93"],"C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\App.js",[],"C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\PersonList.js",["94"],"C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\context\\person\\PersonState.js",["95"],"import React,{useReducer} from 'react'\r\nimport PersonContext from './PersonContext'\r\nimport PersonReducer from './PersonReducer'\r\nimport axios from 'axios'\r\nimport {GET_ALL_PERSONS,PERSIST_CHOSEN_PERSON,\r\n        PERSIST_GROUP,DELETE_CHOSEN_PERSON,\r\n        PERSIST_CHOSEN_PERSON_GROUPS,\r\n        PERSIST_CHOSEN_PERSON_NAMES,\r\n        PERSIST_CHOSEN_GROUP,PERSIST_CHOSEN_GROUP_MEMBERS,\r\n        PERSIST_CHOSEN_GROUP_PROCESSES,\r\n        DELETE_PERSON,\r\n        PERSIST_MEMBERS,\r\n        FILTER_MEMBERS,\r\n        PERSIST_GROUPS,\r\n        PERSIST_PROCESSES,\r\n        FILTER_GROUPS,\r\n        FILTER_PROCESSES,\r\n    PERSIST_ENTITIES1,\r\nPERSIST_ENTITIES2,\r\nPERSIST_ENTITY_LABELS1,\r\nPERSIST_ENTITY_LABELS2,\r\nPERSIST_RELATIONSHIPS,\r\nPERSIST_CHOSEN_NEW_CATEG_PROPERTIES,\r\nPERSIST_NEW_CATEGS} from '../types'\r\n\r\n\r\nconst PersonState = props => {\r\n\r\nconst initialState = {\r\n    persons : [],\r\n    chosenPerson: null,\r\n    chosenGroup: null,\r\n    chosenGroupMembers: [],\r\n    chosenGroupProcesses: [],\r\n    chosenPersonGroups: [],\r\n    chosenPersonNames: [],\r\n    createGroupMembers: [],\r\n    members: [],\r\n    members2: [],\r\n    connectGroups: [],\r\n    connectGroups2: [],\r\n    connectProcesses: [],\r\n    connectProcesses2: [],\r\n    entities1:[],\r\n    entities2:[],\r\n    entities1labels:[],\r\n    entities2labels:[],\r\n    relationships:[],\r\n    newlyAddedCategories:[],\r\n    chosenCategoryProperties:[]\r\n}\r\n\r\nconst [state, dispatch] = useReducer(PersonReducer, initialState)\r\n\r\n\r\n\r\n// Actions :\r\n\r\n  // Get all persons\r\n  const getAllPersons = async () => {\r\n    try {\r\n        const res = await axios.get('/api/graph/persons')\r\n        console.log('from actions / persons :  ',res.data)\r\n        dispatch({\r\n            type: GET_ALL_PERSONS,\r\n            payload: res.data\r\n        })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n  // Search Persons\r\n  const searchPersons = async str => {\r\n    try {\r\n        const res = await axios.get(`/api/graph/persons/byname/${str}`)\r\n        console.log('from actions / persons search :  ',res.data)\r\n        dispatch({\r\n            type: GET_ALL_PERSONS,\r\n            payload: res.data\r\n        })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n  // Get group\r\n  const getGroup = async (id) => {\r\n    try {\r\n        const res = await axios.get(`/api/persons/groups/${id}`)\r\n        dispatch({\r\n            type: PERSIST_GROUP,\r\n            payload: res.data\r\n        })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n // Get Person by id\r\n const getPersonById = async (id) => {\r\n    try {\r\n        const res = await axios.get(`/api/graph/persons/${id}`)\r\n        console.log(\"from action getpersonbyid : \",res.data)\r\n        dispatch({\r\n            type: PERSIST_CHOSEN_PERSON,\r\n            payload: res.data\r\n        })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n // Get Groups by Person id (chosenGroups)\r\n const getGroupsByPersonId = async (id) => {\r\n    try {\r\n        const res = await axios.get(`/api/graph/persons/${id}/groups`)\r\n        console.log(\"from action getgroups of personbyid : \",res.data)\r\n        dispatch({\r\n            type: PERSIST_CHOSEN_PERSON_GROUPS,\r\n            payload: res.data\r\n        })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n // Get Names by Person id (chosenPersonNames)\r\n const getNamesByPersonId = async (id) => {\r\n    try {\r\n        const res = await axios.get(`/api/graph/persons/${id}/names`)\r\n        console.log(\"from action getnames of personbyid : \",res.data)\r\n        dispatch({\r\n            type: PERSIST_CHOSEN_PERSON_NAMES,\r\n            payload: res.data\r\n        })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n//get group by id\r\n\r\nconst getGroupById = async id => {\r\n    try {\r\n        const res = await axios.get(`/api/graph/groups/${id}`)\r\n        console.log(\"from action getgroup by id : \",res.data)\r\n        dispatch({\r\n            type: PERSIST_CHOSEN_GROUP,\r\n            payload: res.data\r\n        })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n// get chosen group members\r\nconst getGroupMembersByGroupId = async id => {\r\n    try {\r\n        const res = await axios.get(`/api/graph/groups/${id}/members`)\r\n        console.log(\"from action getgroup by id : \",res.data)\r\n        dispatch({\r\n            type: PERSIST_CHOSEN_GROUP_MEMBERS,\r\n            payload: res.data\r\n        })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n// get chosen group processes\r\nconst getGroupProcessesByGroupId = async id => {\r\n    try {\r\n        const res = await axios.get(`/api/graph/groups/${id}/processes`)\r\n        console.log(\"from action getgroup by id processes : \",res.data)\r\n        dispatch({\r\n            type: PERSIST_CHOSEN_GROUP_PROCESSES,\r\n            payload: res.data\r\n        })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n // Delete chosen person\r\n const deleteChosenPerson =  () => {\r\n    try {\r\n        dispatch({\r\n            type: DELETE_CHOSEN_PERSON\r\n        })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n\r\n // add Person\r\n const addPerson = async person => {\r\n    try { \r\n        console.log('from actions add person',person)\r\n        await axios.post(`/api/graph/persons`,person)\r\n       \r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n// delete Person\r\nconst deletePerson = async id => {\r\n    try { \r\n        console.log('from actions delete person',id)\r\n        await axios.delete(`/api/graph/persons/${id}`)\r\n       dispatch({\r\n        type: DELETE_PERSON,\r\n        payload: id\r\n       })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n// Edit Person\r\nconst editPerson = async (id,person) => {\r\n    try { \r\n        console.log('from actions delete person',id)\r\n        await axios.put(`/api/graph/persons/${id}`,person)\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n// create group page members\r\n\r\nconst getMembers = async () => {\r\n    try { \r\n        console.log('from actions get members')\r\n        const res = await axios.get(`/api/graph/persons`)\r\n       dispatch({\r\n        type: PERSIST_MEMBERS,\r\n        payload: res.data\r\n       })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n\r\n// connect group process get groups\r\n\r\nconst getGroups = async () => {\r\n    try { \r\n        console.log('from actions get groups')\r\n        const res = await axios.get(`/api/graph/groups`)\r\n       dispatch({\r\n        type: PERSIST_GROUPS,\r\n        payload: res.data\r\n       })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\nconst getProcesses = async () => {\r\n    try { \r\n        console.log('from actions get groups')\r\n        const res = await axios.get(`/api/graph/processes`)\r\n       dispatch({\r\n        type: PERSIST_PROCESSES,\r\n        payload: res.data\r\n       })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n  // Filter Members\r\n\r\n  const filterMembers = text => {\r\n    dispatch({type: FILTER_MEMBERS , payload: text })\r\n}\r\n\r\n  // Filter Groups\r\n\r\n  const filterGroups = text => {\r\n    dispatch({type: FILTER_GROUPS , payload: text })\r\n}\r\n\r\n  // Filter Processes\r\n\r\n  const filterProcesses = text => {\r\n    dispatch({type: FILTER_PROCESSES , payload: text })\r\n}\r\n\r\n\r\n// Create Group\r\nconst createGroup = async data => {\r\n    try { \r\n        console.log('from actions create Group')\r\n        await axios.post(`/api/graph/groups`,data)\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n// Create Process\r\nconst createProcess = async data => {\r\n    try { \r\n        console.log('from actions create Process')\r\n        await axios.post(`/api/graph/processes`,data)\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n// Connect group / process\r\nconst connectGroupProcess = async data => {\r\n    try { \r\n        console.log('from actions connect Group Process')\r\n        await axios.post(`/api/graph/connect/processgroup`,data)\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n// Get entities 1\r\n\r\nconst getEntities1 = async name => {\r\n    try { \r\n        console.log('from actions get entities1')\r\n        const res = await axios.get(`/api/graph/entities/${name}`)\r\n       dispatch({\r\n        type: PERSIST_ENTITIES1,\r\n        payload: res.data\r\n       })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n\r\n// Get entities 2\r\n\r\nconst getEntities2 = async name => {\r\n    try { \r\n        console.log('from actions get entities2')\r\n        const res = await axios.get(`/api/graph/entities/${name}`)\r\n       dispatch({\r\n        type: PERSIST_ENTITIES2,\r\n        payload: res.data\r\n       })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n// Get entity 1 / 2 labels\r\n\r\nconst getEntityLabels = async () => {\r\n    try { \r\n        console.log('from actions get entity labels')\r\n        const res = await axios.get(`/api/graph/entities/labels`)\r\n       dispatch({\r\n        type: PERSIST_ENTITY_LABELS1,\r\n        payload: res.data\r\n       })\r\n       dispatch({\r\n        type: PERSIST_ENTITY_LABELS2,\r\n        payload: res.data\r\n       })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n// get relationships\r\n\r\nconst getRelationships = async () => {\r\n    try { \r\n        console.log('from actions get entity labels')\r\n        const res = await axios.get(`/api/graph/relationships`)\r\n       dispatch({\r\n        type: PERSIST_RELATIONSHIPS,\r\n        payload: res.data\r\n       })\r\n\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n// Connect two entities\r\n\r\nconst connectTwoEntities = async (data) => {\r\n    try { \r\n        console.log('from actions connect two entities')\r\n        await axios.post(`/api/graph/connect/general`,data)\r\n\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n// Add category\r\n\r\nconst addCategory = async data => {\r\n\r\n    try {\r\n        await axios.post(`/api/graph/categories`,data)\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n// Get newly added categories\r\n\r\nconst getNewlyAddedCategories = async () => {\r\n    try { \r\n        console.log('from actions get entities1')\r\n        const res = await axios.get(`/api/graph/categories`)\r\n       dispatch({\r\n        type: PERSIST_NEW_CATEGS,\r\n        payload: res.data\r\n       })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\n// Get newly added categories\r\n\r\nconst getPropertiesForCategory = async name => {\r\n    try { \r\n        console.log('from actions get entities1')\r\n        const res = await axios.get(`/api/graph/categories/properties/${name}`)\r\n       dispatch({\r\n        type: PERSIST_CHOSEN_NEW_CATEG_PROPERTIES,\r\n        payload: res.data\r\n       })\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n\r\nconst addObject = async data => {\r\n    try { \r\n        const res = await axios.post(`/api/graph/objects`,data)\r\n    } catch (err) {\r\n       console.log(err)\r\n    }\r\n}\r\n    return (\r\n        <PersonContext.Provider value={{\r\n            persons: state.persons,\r\n            chosenPerson: state.chosenPerson,\r\n            chosenPersonGroups: state.chosenPersonGroups,\r\n            chosenGroup: state.chosenGroup,\r\n            chosenGroupMembers: state.chosenGroupMembers,\r\n            chosenGroupProcesses: state.chosenGroupProcesses,\r\n            chosenPersonNames: state.chosenPersonNames,\r\n            members: state.members,\r\n            members2: state.members2,\r\n            connectGroups: state.connectGroups,\r\n            connectGroups2: state.connectGroups2,\r\n            connectProcesses: state.connectProcesses,\r\n            connectProcesses2: state.connectProcesses2,\r\n            entities1: state.entities1,\r\n            entities2: state.entities2,\r\n            entities1labels: state.entities1labels,\r\n            entities2labels: state.entities2labels,\r\n            relationships: state.relationships,\r\n            newlyAddedCategories: state.newlyAddedCategories,\r\n            chosenCategoryProperties:state.chosenCategoryProperties,\r\n            getGroup,\r\n            getAllPersons,\r\n            searchPersons,\r\n            getPersonById,\r\n            getNamesByPersonId,\r\n            getGroupsByPersonId,\r\n            deleteChosenPerson,\r\n            getGroupById,\r\n            getGroupMembersByGroupId,\r\n            getGroupProcessesByGroupId,\r\n            addPerson,\r\n            deletePerson,\r\n            getMembers,\r\n            filterMembers,\r\n            createGroup,\r\n            createProcess,\r\n            getGroups,\r\n            filterGroups,\r\n            getProcesses,\r\n            filterProcesses,\r\n            connectGroupProcess,\r\n            editPerson,\r\n            getEntities1,\r\n            getEntities2,\r\n            getEntityLabels,\r\n            getRelationships,\r\n            connectTwoEntities,\r\n            addCategory,\r\n            getNewlyAddedCategories,\r\n            getPropertiesForCategory,\r\n            addObject\r\n        }}>\r\n            {props.children}\r\n        </PersonContext.Provider>\r\n    )\r\n}\r\n\r\nexport default PersonState\r\n","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\context\\person\\PersonReducer.js",["96","97"],"import {GET_ALL_PERSONS,PERSIST_GROUP,PERSIST_CHOSEN_PERSON,DELETE_CHOSEN_PERSON,PERSIST_CHOSEN_PERSON_GROUPS,PERSIST_CHOSEN_GROUP,PERSIST_CHOSEN_GROUP_MEMBERS,\r\n    DELETE_PERSON,PERSIST_CHOSEN_GROUP_PROCESSES,PERSIST_CHOSEN_PERSON_NAMES,PERSIST_MEMBERS,FILTER_MEMBERS,PERSIST_GROUPS,PERSIST_PROCESSES,FILTER_GROUPS,FILTER_PROCESSES,PERSIST_ENTITIES1,PERSIST_ENTITIES2,PERSIST_ENTITY_LABELS1,PERSIST_ENTITY_LABELS2,PERSIST_RELATIONSHIPS,\r\n    PERSIST_CHOSEN_NEW_CATEG_PROPERTIES,\r\n    PERSIST_NEW_CATEGS} from '../types'\r\n\r\n\r\nexport default (state, action) => {\r\n    switch(action.type){\r\n        case GET_ALL_PERSONS:\r\n            return {\r\n                ...state,\r\n                persons : action.payload\r\n            }\r\n            case PERSIST_MEMBERS:\r\n            return {\r\n                ...state,\r\n                members : action.payload,\r\n                members2: action.payload\r\n            }\r\n            case FILTER_MEMBERS:\r\n            return {\r\n                ...state,\r\n                members2 : state.members2.filter(mem => {\r\n                    const regex = new RegExp(`${action.payload}`, 'gi')\r\n                    return mem.properties.name.match(regex)\r\n                })\r\n            }\r\n            case PERSIST_GROUPS:\r\n            return {\r\n                ...state,\r\n                connectGroups : action.payload,\r\n                connectGroups2 : action.payload\r\n            }\r\n            case PERSIST_NEW_CATEGS:\r\n            return {\r\n                ...state,\r\n                newlyAddedCategories : action.payload\r\n            }\r\n            case PERSIST_CHOSEN_NEW_CATEG_PROPERTIES:\r\n            return {\r\n                ...state,\r\n                chosenCategoryProperties : action.payload\r\n            }\r\n            case PERSIST_PROCESSES:\r\n            return {\r\n                ...state,\r\n                connectProcesses : action.payload,\r\n                connectProcesses2 : action.payload\r\n            }\r\n            case FILTER_GROUPS:\r\n                return {\r\n                    ...state,\r\n                    connectGroups2 : state.connectGroups2.filter(gr => {\r\n                        const regex = new RegExp(`${action.payload}`, 'gi')\r\n                        return gr.properties.label.match(regex)\r\n                    })\r\n                }\r\n                case FILTER_PROCESSES:\r\n                    return {\r\n                        ...state,\r\n                        connectProcesses2 : state.connectProcesses2.filter(pr => {\r\n                            const regex = new RegExp(`${action.payload}`, 'gi')\r\n                            return pr.properties.label.match(regex)\r\n                        })\r\n                    }\r\n            case DELETE_PERSON:\r\n            return {\r\n                ...state,\r\n                persons : state.persons.filter(p => p.identity.low !== action.payload)\r\n            }\r\n            case PERSIST_GROUP:\r\n            return {\r\n                ...state,\r\n                group : action.payload\r\n            }\r\n            case PERSIST_CHOSEN_PERSON:\r\n            return {\r\n                ...state,\r\n                chosenPerson : action.payload\r\n            }\r\n            case PERSIST_CHOSEN_GROUP:\r\n                return {\r\n                    ...state,\r\n                    chosenGroup : action.payload\r\n                }\r\n                case PERSIST_CHOSEN_GROUP_MEMBERS:\r\n                return {\r\n                    ...state,\r\n                    chosenGroupMembers : action.payload\r\n                }\r\n                case PERSIST_CHOSEN_GROUP_PROCESSES:\r\n                return {\r\n                    ...state,\r\n                    chosenGroupProcesses : action.payload\r\n                }\r\n            case PERSIST_CHOSEN_PERSON_GROUPS:\r\n            return{\r\n                ...state,\r\n                chosenPersonGroups: action.payload\r\n            }\r\n            case PERSIST_CHOSEN_PERSON_NAMES:\r\n            return{\r\n                ...state,\r\n                chosenPersonNames: action.payload\r\n            }\r\n            case DELETE_CHOSEN_PERSON:\r\n                return {\r\n                    ...state,\r\n                    chosenPerson : null\r\n                }\r\n            case PERSIST_ENTITIES1:\r\n                return {\r\n                        ...state,\r\n                        entities1 : action.payload\r\n                    }\r\n            case PERSIST_ENTITIES2:\r\n                return {\r\n                        ...state,\r\n                         entities2 : action.payload\r\n                       }   \r\n              case PERSIST_ENTITY_LABELS1:\r\n                return {\r\n                        ...state,\r\n                        entities1labels : action.payload\r\n                       }\r\n               case PERSIST_ENTITY_LABELS2:\r\n                return {\r\n                        ...state,\r\n                        entities2labels : action.payload\r\n                       }\r\n                       case PERSIST_RELATIONSHIPS:\r\n                        return {\r\n                                ...state,\r\n                                relationships : action.payload\r\n                               }\r\n    }\r\n}","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\context\\person\\PersonContext.js",[],"C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\context\\types.js",[],"C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\Person.js",["98"],"C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\NeoGraph.js",["99"],"import React, { useEffect, useRef } from \"react\";\r\nimport useResizeAware from \"react-resize-aware\";\r\nimport PropTypes from \"prop-types\";\r\nimport Neovis from \"neovis.js/dist/neovis.js\";\r\n\r\nconst NeoGraph = (props) => {\r\n  const {\r\n    width,\r\n    height,\r\n    containerId,\r\n    backgroundColor,\r\n    neo4jUri,\r\n    neo4jUser,\r\n    neo4jPassword,\r\n    init_cypher\r\n  } = props;\r\n\r\n  const visRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const config = {\r\n      container_id: visRef.current.id,\r\n      server_url: neo4jUri,\r\n      server_user: neo4jUser,\r\n      server_password: neo4jPassword,\r\n      labels: {\r\n\t\t\t\"Person\":{\r\n                caption: \"name\",\r\n                size: 0.5,\r\n                font: '20px arial red',\r\n            },\r\n            \"Name\":{\r\n\t\t\t\tcaption: \"label\",\r\n                size: 0.5,\r\n                font: '15px arial black'\r\n            },\r\n\t\t\t\"Group\":{\r\n\t\t\t\tcaption: \"label\",\r\n                size: 0.5,\r\n                font: '15px arial black'\r\n            },\r\n            \"Process\":{\r\n\t\t\t\tcaption: \"label\",\r\n                size: 0.5,\r\n                font: '15px arial black'\r\n            },\r\n            \"Event\":{\r\n                caption: \"label\",\r\n                size: 0.5,\r\n                font: '15px arial black'\r\n            },\r\n      \t    \"Function\":{\r\n\t\t\t\t        caption: \"label\",\r\n                size: 0.5,\r\n                font: '15px arial black'\r\n            },\r\n      \t    \"Timespan\":{\r\n\t\t\t\t        caption: \"label\",\r\n                size: 0.5,\r\n                font: '15px arial black'\r\n            },\r\n      \t    \"Activity\":{\r\n\t\t\t\t        caption: \"name\",\r\n                size: 0.5,\r\n                font: '15px arial black'\r\n            },\r\n      \t    \"Source\":{\r\n\t\t\t\t        caption: \"label\",\r\n                size: 0.5,\r\n                font: '15px arial black'\r\n            },\r\n            \"Location\":{\r\n              caption: \"label\",\r\n              size: 0.5,\r\n              font: '15px arial black'\r\n          }\r\n      },\r\n      relationships: {\r\n        \"WAS_MEMBER_IN\":{\r\n            thickness: \"50\"\r\n        },\r\n        \"NAMED\":{\r\n            thickness: \"10\"\r\n        },\r\n        \"DID_PROCESS\":{\r\n            thickness: \"10\"\r\n        },\r\n        \"SUB_PROCESS\":{\r\n            thickness: \"10\"\r\n        },\r\n        \"HAS_EVENT\":{\r\n            thickness: \"10\"\r\n        },\r\n        \"ACCORDING_TO\":{\r\n          thickness: \"10\"\r\n      },\r\n        \"WAS_A\":{\r\n        thickness: \"10\"\r\n    },\r\n        \"ACTIVITY\":{\r\n        thickness: \"10\"\r\n    },\r\n        \"IN_TIME\":{\r\n        thickness: \"10\"\r\n        },\r\n        \"IN_LOCATION\":{\r\n          thickness: \"10\"\r\n          },\r\n          \"FATHER_OF\":{\r\n            thickness: \"10\"\r\n            }\r\n      },\r\n\t  arrows: true,\r\n      initial_cypher:\r\n        init_cypher,\r\n    };\r\n    const vis = new Neovis(config);\r\n    vis.render();\r\n  }, [neo4jUri, neo4jUser, neo4jPassword]);\r\n\r\n  return (\r\n    <div\r\n      id={containerId}\r\n      ref={visRef}\r\n      style={{\r\n        width: `${width}px`,\r\n        height: `${height}px`,\r\n        backgroundColor: `${backgroundColor}`,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nNeoGraph.defaultProps = {\r\n  width: 600,\r\n  height: 600,\r\n  backgroundColor: \"#d3d3d3\",\r\n};\r\n\r\nNeoGraph.propTypes = {\r\n  width: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  containerId: PropTypes.string.isRequired,\r\n  neo4jUri: PropTypes.string.isRequired,\r\n  neo4jUser: PropTypes.string.isRequired,\r\n  neo4jPassword: PropTypes.string.isRequired,\r\n  backgroundColor: PropTypes.string,\r\n};\r\n\r\nconst ResponsiveNeoGraph = (props) => {\r\n  const [resizeListener, sizes] = useResizeAware();\r\n\r\n  const side = Math.max(sizes.width, sizes.height) / 2;\r\n  const neoGraphProps = { ...props, width: side, height: side };\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      {resizeListener}\r\n      <NeoGraph {...neoGraphProps} />\r\n    </div>\r\n  );\r\n};\r\n\r\nResponsiveNeoGraph.defaultProps = {\r\n  backgroundColor: \"#d3d3d3\",\r\n};\r\n\r\nResponsiveNeoGraph.propTypes = {\r\n  containerId: PropTypes.string.isRequired,\r\n  neo4jUri: PropTypes.string.isRequired,\r\n  neo4jUser: PropTypes.string.isRequired,\r\n  neo4jPassword: PropTypes.string.isRequired,\r\n  backgroundColor: PropTypes.string,\r\n};\r\n\r\nexport { NeoGraph, ResponsiveNeoGraph };","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\AddPerson.js",[],"C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\Group.js",["100"],"C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\AddResource.js",["101"],"import React,{useContext,useState} from 'react'\r\nimport PersonContext from '../context/person/PersonContext'\r\n\r\n\r\nconst AddResource = () => {\r\n\r\n  const personContext = useContext(PersonContext)\r\n  const {addPerson} = personContext\r\n\r\n  const [categLabel, setCategLabel] = useState('')\r\n  const [categProperties, setCategProperties] = useState('')\r\n\r\n  const onChangeCategLabel = e => {\r\n        setCategLabel(e.target.value)\r\n  }\r\n  const onChangeCategProperties = e => {\r\n    setCategProperties(e.target.value)\r\n  }\r\n\r\n  return (\r\n      <div>\r\n          <h1>Add new Resource:</h1>\r\n          <form >\r\n          <div class=\"form-group\">\r\n            <label>Category Name</label>\r\n            <input type=\"text\" class=\"form-control\" placeholder=\"Category Name\" value={categLabel} name=\"categLabel\" onChange={onChangeCategLabel} required/>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>Object Properties</label>\r\n            <input type=\"text\" class=\"form-control\" placeholder=\"Properties - format : property_name:value,property_name:value etc..\" value={categProperties} name=\"categProperties\" onChange={onChangeCategProperties} required/>\r\n          </div>\r\n\r\n          <div className=\"form-group\" >\r\n            <input type=\"submit\" class=\"btn btn-success\" value=\"Add Resource\"/>\r\n          </div>\r\n          </form>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default AddResource\r\n","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\AddGroup.js",["102","103"],"import React,{useState,useEffect, useContext,useRef} from 'react'\r\nimport PersonContext from '../context/person/PersonContext'\r\n\r\nconst AddGroup = () => {\r\n\r\n    const personContext = useContext(PersonContext)\r\n    const {members,members2,getMembers,filterMembers,createGroup} = personContext\r\n\r\n    const [group, setGroup] = useState('')\r\n    const [test, setTest] = useState([])\r\n\r\n    const text = useRef('')\r\n\r\n    const onChange = e => {\r\n        if(text.current.value !== ''){\r\n            filterMembers(e.target.value)\r\n        }else{\r\n            getMembers()\r\n        }\r\n    }\r\n\r\n    const onLabelChange = e => {\r\n        setGroup(e.target.value)\r\n    }\r\n    const onMemberChange = e => {\r\n        if(!test.includes(e.target.value)){\r\n            setTest([...test,e.target.value])\r\n        }else{\r\n            setTest(test.filter(item => item !== e.target.value))\r\n        }\r\n        \r\n    }\r\nconst resetSelect = () => {\r\n    setTest([])\r\n}\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        console.log(\"test : \"+test)\r\n        const members = test.map(e => parseInt(e))\r\n        const data = {\r\n            label:group,\r\n            members\r\n        }\r\n        console.log('daaaata: ',data)\r\n        if(members.length == 0){\r\n            alert(\"Add members to the group !!\")\r\n        }else{\r\n            createGroup(data)\r\n        }\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        getMembers()\r\n        console.log(members)\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n        <h2>Create Group :</h2>\r\n\r\n        <form onSubmit={onSubmit}>\r\n\r\n  <div class=\"form-group\">\r\n    <label>Label</label>\r\n    <input type=\"text\" class=\"form-control\" placeholder=\"Label\" value={group} name=\"group\" onChange={onLabelChange} required/>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"members\">Members</label>\r\n    <input ref={text} type=\"text\" class=\"form-control\" placeholder=\"Search\" name=\"search\" onChange={onChange}/>\r\n    <select class=\"form-control\" id=\"members\" value={test} onChange={onMemberChange} multiple={true}>\r\n        {members2.length !== 0 && members2.map(member => \r\n            <option value={member.identity.low}>{member.properties.name}</option>\r\n            )}\r\n    </select>\r\n    <button onClick={resetSelect} type=\"button\" class=\"btn btn-warning\">reset members</button>\r\n  </div>\r\n  {test.length !== 0 && <div>\r\n      <p>selected members :</p>\r\n      <ul>\r\n          {members.map(m => test.includes(m.identity.low.toString()) && <li>{ m.properties.name }</li>)}\r\n      </ul>\r\n  </div>}\r\n  \r\n  <div className=\"form-group\" >\r\n      <input type=\"submit\" class=\"btn btn-success\" value=\"submit\"/>\r\n      </div>\r\n</form>\r\n</>\r\n    )\r\n}\r\n\r\nexport default AddGroup\r\n","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\AddProcess.js",[],"C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\ConnectGroupProcess.js",["104","105"],"import React,{useEffect,useRef,useState,useContext} from 'react'\r\nimport PersonContext from '../context/person/PersonContext'\r\n\r\n\r\nconst ConnectGroupProcess = props => {\r\n\r\n    const personContext = useContext(PersonContext)\r\n    const {connectGroups,connectGroups2,connectProcesses,connectProcesses2,\r\n            getGroups,getProcesses,filterGroups,\r\n            filterProcesses,connectGroupProcess} = personContext\r\n\r\n    const text1 = useRef('')\r\n    const text2 = useRef('')\r\n\r\n    const [group, setGroup] = useState('')\r\n    const [processes, setProcesses] = useState([])\r\n\r\n    const onGroupChange = e => {\r\n            setGroup(e.target.value)\r\n\r\n    }\r\n    const onProcessChange = e => {\r\n        if(!processes.includes(e.target.value)){\r\n            setProcesses([...processes,e.target.value])\r\n        }else{\r\n            setProcesses(processes.filter(item => item !== e.target.value))\r\n        }\r\n    }\r\n\r\n    const onGroupSearchChange = e => {\r\n        if(text1.current.value !== ''){\r\n            filterGroups(e.target.value)\r\n        }else{\r\n            getGroups()\r\n        }\r\n    }\r\n\r\n    const onProcessSearchChange = e => {\r\n        if(text2.current.value !== ''){\r\n            filterProcesses(e.target.value)\r\n        }else{\r\n            getProcesses()\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getGroups()\r\n        getProcesses()\r\n    }, [])\r\n\r\n    const resetProcesses = () => {\r\n        setProcesses([])\r\n    }\r\n    const resetGroup = () => {\r\n        setGroup('')\r\n    }\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        const groupInt = parseInt(group)\r\n        const processesInt = processes.map(e => parseInt(e))\r\n        const data = {\r\n            group:groupInt,\r\n            processes:processesInt\r\n        }\r\n        if(group !== '' && processes.length !== 0){\r\n            connectGroupProcess(data)\r\n            setTimeout(() => {\r\n                props.history.push('/')\r\n           }, 1000);\r\n        }else{\r\n            alert(\"fill the group and the processes!!\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <h2>Connect a Group to a process:</h2>\r\n\r\n        <form onSubmit={onSubmit}>\r\n\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"members\">Groups</label>\r\n    <input ref={text1} type=\"text\" class=\"form-control\" placeholder=\"Search Groups\" name=\"searchgroup\" onChange={onGroupSearchChange}/>\r\n    <select class=\"form-control\" id=\"members\" value={group} onChange={onGroupChange} multiple={false}>\r\n        {connectGroups2 && connectGroups2.length !== 0 && connectGroups2.map(grp => \r\n            <option value={grp.identity.low}>{grp.properties.label}</option>\r\n            )}\r\n    </select>\r\n    <button onClick={resetGroup} type=\"button\" class=\"btn btn-warning\">reset Groups</button>\r\n  </div>\r\n  {group !== \"\" && <div>\r\n      <p>selected Group :</p>\r\n      {connectGroups.map(m => group == m.identity.low.toString() && <li>{ m.properties.label }</li>)}\r\n  </div>}\r\n  <div class=\"form-group\">\r\n    <label for=\"members\">Processes</label>\r\n    <input ref={text2} type=\"text\" class=\"form-control\" placeholder=\"Search Processes\" name=\"searchprocess\" onChange={onProcessSearchChange}/>\r\n    <select class=\"form-control\" id=\"members\" value={processes} onChange={onProcessChange} multiple={true}>\r\n        {connectProcesses2.length !== 0 && connectProcesses2.map(pr => \r\n            <option value={pr.identity.low}>{pr.properties.label}</option>\r\n            )}\r\n    </select>\r\n    <button onClick={resetProcesses} type=\"button\" class=\"btn btn-warning\">reset Processes</button>\r\n  </div>\r\n  {processes.length !== 0 && <div>\r\n      <p>selected processes :</p>\r\n      <ul>\r\n          {connectProcesses.map(m => processes.includes(m.identity.low.toString()) && <li>{ m.properties.label }</li>)}\r\n      </ul>\r\n  </div>}\r\n  \r\n  <div className=\"form-group\" >\r\n      <input type=\"submit\" class=\"btn btn-success\" value=\"submit\"/>\r\n      </div>\r\n</form>\r\n</>\r\n    )\r\n}\r\n\r\nexport default ConnectGroupProcess\r\n","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\EditPerson.js",["106"],"import React,{useContext,useState,useEffect} from 'react'\r\nimport PersonContext from '../context/person/PersonContext'\r\n\r\nconst EditPerson = props => {\r\n\r\n    const personContext = useContext(PersonContext)\r\n    const {getPersonById,chosenPerson,editPerson} = personContext\r\n\r\n    const { match: { params } } = props\r\n\r\n    const [person, setPerson] = useState({\r\n        name: '',\r\n        gender: 'Male',\r\n        birth: '',\r\n        death: ''\r\n    })\r\n\r\n    const onChange = e => {\r\n        setPerson({\r\n            ...person,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    useEffect(() => {\r\n        getPersonById(params.id)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(chosenPerson !== null){\r\n            setPerson({\r\n                    name: chosenPerson.properties.name,\r\n                    gender: chosenPerson.properties.gender,\r\n                    birth: chosenPerson.properties.birth,\r\n                    death: chosenPerson.properties.death\r\n                })\r\n        }\r\n        \r\n    }, [chosenPerson])\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n       // console.log(person)\r\n        editPerson(params.id,person)\r\n        setTimeout(() => {\r\n             props.history.push('/')\r\n        }, 1000);\r\n       \r\n    }\r\n\r\n    return (\r\n       <>\r\n  <h2>Edit Person :</h2>\r\n\r\n  {chosenPerson !== null && \r\n  <form onSubmit={onSubmit} >\r\n  <div class=\"form-group\">\r\n    <label>Name</label>\r\n    <input type=\"text\" class=\"form-control\" placeholder=\"Name\" value={person.name} name=\"name\" onChange={onChange} required/>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label>Gender</label>\r\n    <select class=\"form-control\" value={person.gender} name=\"gender\" onChange={onChange}>\r\n      <option value=\"Male\">Male</option>\r\n      <option value=\"Female\">Female</option>\r\n      <option value=\"...\">Not defined</option>\r\n    </select>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label>Birth Year</label>\r\n    <input type=\"text\" class=\"form-control\" placeholder=\"Birth Year\" name=\"birth\" value={person.birth} onChange={onChange}/>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label>Death Year</label>\r\n    <input type=\"text\" class=\"form-control\" placeholder=\"Death Year\" name=\"death\" value={person.death} onChange={onChange}/>\r\n  </div>\r\n\r\n  <div className=\"form-group\">\r\n      <input type=\"submit\" class=\"btn btn-warning\" value=\"Edit Person\"/>\r\n      </div>\r\n\r\n</form>\r\n  }\r\n  \r\n       </>\r\n    )\r\n}\r\n\r\nexport default EditPerson\r\n","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\ConnectEntities.js",["107","108","109","110","111","112","113","114","115"],"import React,{useContext,useState,useEffect} from 'react'\r\nimport PersonContext from '../context/person/PersonContext'\r\n\r\n\r\nconst ConnectEntities = props => {\r\n\r\n    const personContext = useContext(PersonContext)\r\n    const {entities1,entities2,entities1labels,entities2labels,\r\n        getEntities1,getEntities2,getEntityLabels,\r\n        relationships,getRelationships,\r\n        connectTwoEntities} = personContext\r\n\r\n\r\n    const [entities1label, setEntities1label] = useState('Person')\r\n    const [entities2label, setEntities2label] = useState('Person')\r\n\r\n    const [entity1, setEntity1] = useState('')\r\n    const [entity2, setEntity2] = useState('')\r\n\r\n    const [relationship, setRelationship] = useState('')\r\n\r\n    const [newrel, setNewrel] = useState('')\r\n\r\n    const [relDisable, setRelDisable] = useState(false)\r\n    const onChangeEntities1Label = e => {\r\n        setEntities1label(e.target.value)\r\n    }\r\n    const onChangeEntities2Label = e => {\r\n        setEntities2label(e.target.value)\r\n    }\r\n\r\n    const onChangeEntity1 = e => {\r\n        setEntity1(e.target.value)\r\n    }\r\n    const onChangeEntity2 = e => {\r\n        setEntity2(e.target.value)\r\n    }\r\n\r\n    const onChangeRelationship = e => {\r\n        setRelationship(e.target.value)\r\n    }\r\n    const onChangeNewRel = e => {\r\n        setNewrel(e.target.value)\r\n        if(e.target.value == \"\"){\r\n            setRelDisable(false)\r\n        }else{\r\n            setRelDisable(true)\r\n            setRelationship('')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n      getEntityLabels()\r\n      getRelationships()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getEntities1(entities1label)\r\n        getEntities2(entities2label)\r\n    }, [entities1label,entities2label])\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        const data = {\r\n            lab1:entities1label,\r\n            ent1:entity1,\r\n            lab2:entities2label,\r\n            ent2:entity2,\r\n            rel:relationship\r\n        }\r\n        if(newrel !== \"\"){\r\n            data.rel = newrel\r\n        }\r\n        if(entity1 == \"\" || entity2 == \"\"){\r\n            alert(\"All entities should be filled!\")\r\n        }else if(relDisable == true && newrel == \"\"){\r\n            alert(\"Add the new relationship\")\r\n        }else if(relDisable == false && relationship == \"\"){\r\n            alert(\"Select the relationship\")\r\n        }\r\n        \r\n        else{\r\n            connectTwoEntities(data)\r\n            setTimeout(() => {\r\n                props.history.push('/')\r\n           }, 1500);\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={onSubmit} >\r\n\r\n       <div class=\"form-group\">\r\n          <label>Category 1</label>\r\n          <select class=\"form-control\" value={entities1label} onChange={onChangeEntities1Label} multiple={false}>\r\n        {entities1labels.length !== 0 && entities1labels.map(enl => \r\n            <option value={enl}>{enl}</option>\r\n            )}\r\n    </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n        <label>Value</label>\r\n          <select class=\"form-control\" id=\"members\" value={entity1} onChange={onChangeEntity1} multiple={false}>\r\n        {entities1.length !== 0 && entities1.map(f => \r\n            <option value={f.identity.low}>{f.properties.label}</option>\r\n            )}\r\n            <option value=\"\"></option>\r\n    </select>\r\n        </div>\r\n{/*--------------------------*/}\r\n<hr/>\r\n<div class=\"form-group\">\r\n          <label>Category 2</label>\r\n          <select class=\"form-control\" value={entities2label} onChange={onChangeEntities2Label} multiple={false}>\r\n        {entities2labels.length !== 0 && entities2labels.map(enl => \r\n            <option value={enl}>{enl}</option>\r\n            )}\r\n    </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n        <label>Value</label>\r\n          <select class=\"form-control\" id=\"members\" value={entity2} onChange={onChangeEntity2} multiple={false}>\r\n        {entities2.length !== 0 && entities2.map(en => \r\n            <option value={en.identity.low}>{en.properties.label}</option>\r\n            )}\r\n            <option value=\"\"></option>\r\n    </select>\r\n        </div>\r\n        <hr/>\r\n{/*--------------------------*/}\r\n\r\n        <div class=\"form-group\">\r\n                <label>Relationship</label>\r\n                <select class=\"form-control\" value={relationship} onChange={onChangeRelationship} multiple={false} disabled={relDisable}>\r\n                {relationships.length !== 0 && relationships.map(rel => \r\n                    <option value={rel}>{rel}</option>\r\n                    )}\r\n                    <option value=\"\"></option>\r\n            </select>\r\n            <label>You don't see your relationship ?</label>\r\n            <input type=\"text\" class=\"form-control\" placeholder=\"New relationship\" value={newrel} name=\"newrel\" onChange={onChangeNewRel} />\r\n                </div>\r\n      \r\n    <div className=\"form-group\" >\r\n      <input type=\"submit\" class=\"btn btn-success\" value=\"Create Relationship\"/>\r\n      </div>\r\n\r\n      </form>\r\n    )\r\n}\r\n\r\nexport default ConnectEntities\r\n","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\AddCategory.js",[],"C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\components\\AddObject.js",["116","117"],"import React,{useContext,useState,useEffect} from 'react'\r\nimport PersonContext from '../context/person/PersonContext'\r\n\r\nconst AddObject = props => {\r\n\r\n    const personContext = useContext(PersonContext)\r\n    const {getNewlyAddedCategories,getPropertiesForCategory,\r\n        newlyAddedCategories,chosenCategoryProperties,addObject} = personContext\r\n\r\n    const [categ, setCateg] = useState('')\r\n    const [object, setObject] = useState({})\r\n\r\n\r\n    const onChange = e => {\r\n        setObject({...object,[e.target.name]:e.target.value})\r\n    }\r\n\r\n\r\n    const onChangeCateg = e => {\r\n        setCateg(e.target.value)\r\n    }\r\n    useEffect(() => {\r\n        getNewlyAddedCategories()\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if(categ !== ''){\r\n            getPropertiesForCategory(categ)\r\n        }\r\n    },[categ])\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        if(Object.keys(object).length === 0){\r\n            alert(\"Fill the form\")\r\n        }else{\r\n            let data = {\r\n                categ,\r\n                object\r\n            }\r\n            addObject(data)\r\n            setTimeout(() => {\r\n                props.history.push('/')\r\n           }, 1000)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n        <h1>Add new Object:</h1>\r\n        <form onSubmit={onSubmit}>\r\n        <div class=\"form-group\">\r\n        <label>Category Name</label>\r\n          <select class=\"form-control\" value={categ} onChange={onChangeCateg} multiple={false}>\r\n        {newlyAddedCategories.length !== 0 && newlyAddedCategories.map(categ => \r\n            <option value={categ}>{categ}</option>\r\n            )}\r\n            <option value=\"\"></option>\r\n    </select>\r\n    </div>\r\n\r\n    {\r\n        chosenCategoryProperties.length !== 0 ? \r\n        \r\n        <form onSubmit={onSubmit}>\r\n\r\n            {chosenCategoryProperties.map(property => \r\n                <>\r\n                <div class=\"form-group\">\r\n                    <label>{property}</label>\r\n                    <input type=\"text\" class=\"form-control\" placeholder={property} name={property} value={object[property]} onChange={onChange}/>\r\n                </div>\r\n                </>\r\n                )}\r\n\r\n        </form> \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        : <p style={{color: 'red'}}>Select a Category!</p>\r\n    }\r\n\r\n        <div className=\"form-group\" >\r\n          <input type=\"submit\" class=\"btn btn-success\" value=\"Add Object\"/>\r\n        </div>\r\n        </form>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default AddObject\r\n","C:\\Users\\Oussama\\Desktop\\pfe-test-api\\client\\src\\layout\\Header.js",[],{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":15,"column":4,"nodeType":"124","endLine":15,"endColumn":6,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":445,"column":15,"nodeType":"128","messageId":"129","endLine":445,"endColumn":18},{"ruleId":"130","severity":1,"message":"131","line":7,"column":1,"nodeType":"132","endLine":137,"endColumn":2},{"ruleId":"133","severity":1,"message":"134","line":8,"column":5,"nodeType":"135","messageId":"136","endLine":136,"endColumn":6},{"ruleId":"122","severity":1,"message":"137","line":21,"column":8,"nodeType":"124","endLine":21,"endColumn":10,"suggestions":"138"},{"ruleId":"122","severity":1,"message":"139","line":119,"column":6,"nodeType":"124","endLine":119,"endColumn":42,"suggestions":"140"},{"ruleId":"122","severity":1,"message":"141","line":20,"column":8,"nodeType":"124","endLine":20,"endColumn":10,"suggestions":"142"},{"ruleId":"126","severity":1,"message":"143","line":8,"column":10,"nodeType":"128","messageId":"129","endLine":8,"endColumn":19},{"ruleId":"144","severity":1,"message":"145","line":46,"column":27,"nodeType":"146","messageId":"147","endLine":46,"endColumn":29},{"ruleId":"122","severity":1,"message":"148","line":57,"column":8,"nodeType":"124","endLine":57,"endColumn":10,"suggestions":"149"},{"ruleId":"122","severity":1,"message":"150","line":48,"column":8,"nodeType":"124","endLine":48,"endColumn":10,"suggestions":"151"},{"ruleId":"144","severity":1,"message":"145","line":94,"column":37,"nodeType":"146","messageId":"147","endLine":94,"endColumn":39},{"ruleId":"122","severity":1,"message":"152","line":26,"column":8,"nodeType":"124","endLine":26,"endColumn":10,"suggestions":"153"},{"ruleId":"144","severity":1,"message":"145","line":44,"column":27,"nodeType":"146","messageId":"147","endLine":44,"endColumn":29},{"ruleId":"122","severity":1,"message":"154","line":55,"column":8,"nodeType":"124","endLine":55,"endColumn":10,"suggestions":"155"},{"ruleId":"122","severity":1,"message":"156","line":60,"column":8,"nodeType":"124","endLine":60,"endColumn":39,"suggestions":"157"},{"ruleId":"144","severity":1,"message":"145","line":74,"column":20,"nodeType":"146","messageId":"147","endLine":74,"endColumn":22},{"ruleId":"144","severity":1,"message":"145","line":74,"column":37,"nodeType":"146","messageId":"147","endLine":74,"endColumn":39},{"ruleId":"144","severity":1,"message":"145","line":76,"column":29,"nodeType":"146","messageId":"147","endLine":76,"endColumn":31},{"ruleId":"144","severity":1,"message":"145","line":76,"column":47,"nodeType":"146","messageId":"147","endLine":76,"endColumn":49},{"ruleId":"144","severity":1,"message":"145","line":78,"column":29,"nodeType":"146","messageId":"147","endLine":78,"endColumn":31},{"ruleId":"144","severity":1,"message":"145","line":78,"column":54,"nodeType":"146","messageId":"147","endLine":78,"endColumn":56},{"ruleId":"122","severity":1,"message":"158","line":24,"column":7,"nodeType":"124","endLine":24,"endColumn":9,"suggestions":"159"},{"ruleId":"122","severity":1,"message":"160","line":30,"column":7,"nodeType":"124","endLine":30,"endColumn":14,"suggestions":"161"},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'deleteChosenPerson' and 'getAllPersons'. Either include them or remove the dependency array.","ArrayExpression",["164"],"no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'getGroupsByPersonId', 'getNamesByPersonId', 'getPersonById', and 'params.id'. Either include them or remove the dependency array.",["165"],"React Hook useEffect has a missing dependency: 'init_cypher'. Either include it or remove the dependency array.",["166"],"React Hook useEffect has missing dependencies: 'getGroupById', 'getGroupMembersByGroupId', 'getGroupProcessesByGroupId', and 'params.id'. Either include them or remove the dependency array.",["167"],"'addPerson' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'getMembers' and 'members'. Either include them or remove the dependency array.",["168"],"React Hook useEffect has missing dependencies: 'getGroups' and 'getProcesses'. Either include them or remove the dependency array.",["169"],"React Hook useEffect has missing dependencies: 'getPersonById' and 'params.id'. Either include them or remove the dependency array.",["170"],"React Hook useEffect has missing dependencies: 'getEntityLabels' and 'getRelationships'. Either include them or remove the dependency array.",["171"],"React Hook useEffect has missing dependencies: 'getEntities1' and 'getEntities2'. Either include them or remove the dependency array.",["172"],"React Hook useEffect has a missing dependency: 'getNewlyAddedCategories'. Either include it or remove the dependency array.",["173"],"React Hook useEffect has a missing dependency: 'getPropertiesForCategory'. Either include it or remove the dependency array.",["174"],"no-global-assign","no-unsafe-negation",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [deleteChosenPerson, getAllPersons]",{"range":"197","text":"198"},"Update the dependencies array to be: [getGroupsByPersonId, getNamesByPersonId, getPersonById, params.id]",{"range":"199","text":"200"},"Update the dependencies array to be: [neo4jUri, neo4jUser, neo4jPassword, init_cypher]",{"range":"201","text":"202"},"Update the dependencies array to be: [getGroupById, getGroupMembersByGroupId, getGroupProcessesByGroupId, params.id]",{"range":"203","text":"204"},"Update the dependencies array to be: [getMembers, members]",{"range":"205","text":"206"},"Update the dependencies array to be: [getGroups, getProcesses]",{"range":"207","text":"208"},"Update the dependencies array to be: [getPersonById, params.id]",{"range":"209","text":"210"},"Update the dependencies array to be: [getEntityLabels, getRelationships]",{"range":"211","text":"212"},"Update the dependencies array to be: [entities1label, entities2label, getEntities1, getEntities2]",{"range":"213","text":"214"},"Update the dependencies array to be: [getNewlyAddedCategories]",{"range":"215","text":"216"},"Update the dependencies array to be: [categ, getPropertiesForCategory]",{"range":"217","text":"218"},[474,476],"[deleteChosenPerson, getAllPersons]",[766,768],"[getGroupsByPersonId, getNamesByPersonId, getPersonById, params.id]",[2840,2876],"[neo4jUri, neo4jUser, neo4jPassword, init_cypher]",[783,785],"[getGroupById, getGroupMembersByGroupId, getGroupProcessesByGroupId, params.id]",[1463,1465],"[getMembers, members]",[1367,1369],"[getGroups, getProcesses]",[659,661],"[getPersonById, params.id]",[1582,1584],"[getEntityLabels, getRelationships]",[1695,1726],"[entities1label, entities2label, getEntities1, getEntities2]",[689,691],"[getNewlyAddedCategories]",[808,815],"[categ, getPropertiesForCategory]"]